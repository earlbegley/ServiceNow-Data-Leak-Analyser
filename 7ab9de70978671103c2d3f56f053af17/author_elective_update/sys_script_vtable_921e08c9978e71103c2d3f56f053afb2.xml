<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="DELETE">
        <active>true</active>
        <advanced>false</advanced>
        <cache_isolation_level>USER</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>0</cache_ttl>
        <name>DLA - Potential Data Leak Table</name>
        <script><![CDATA[/* global x_376096_dla, v_table, v_query, GlideRecord */
/* eslint no-undef: "error" */
(function executeQuery(v_table, v_query) {
    // Main API:
    //    v_table.addRow({ ... }) - adds a row to the result set
    
    // There are also query helper methods
    //    v_query.getEncodedQuery() - returns encoded querystring
    //    v_query.getCondition(field) - returns encoded querystring for the given field (includes field name, operator, and value)
    //    v_query.getParameter(field) - returns parameter for the given field (only includes value for equality conditions)
    //    v_query.isGet() - returns whether the query is a single get by sys_id
    //    v_query.getSysId() - returns parameter for sys_id field
    //    v_query.isTextSearch() - returns whether the query contains a text query parameter
    //    v_query.getTextSearch() - returns text search query parameter (internal field name 123TEXTQUERY321)
    //    v_query.getFirstRowWanted() - returns the first row to include
    //    v_query.getLastRowWanted() - returns the last row to include
  
    // Note: You must define sys_id for each row so that forms and lists for this table work properly
     
    // Your code goes here
    // v_table.addRow({...})

	const affectedTables = new x_376096_dla.DLAUtil().getAffectedTables();
	affectedTables.breached.forEach(breach => {
		let widgetSysID;
		const widgetGr = new GlideRecord('sp_widget');
		widgetGr.addQuery('id', breach.widget)
			.addOrCondition('sys_id', breach.widget);
		widgetGr.setLimit(1);
		widgetGr.query();
		if (widgetGr.next()) {
			widgetSysID = widgetGr.getUniqueValue();
		}

		v_table.addRow({
			widget: widgetSysID,
			table: breach.table,
			transaction: breach.transaction,
			notes: breach.reason,
			probability: breach.prob
		});
	});

  })(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-20 22:00:54</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>921e08c9978e71103c2d3f56f053afb2</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>DLA - Potential Data Leak Table</sys_name>
        <sys_package display_value="Data Leak Analyser" source="x_376096_dla">7ab9de70978671103c2d3f56f053af17</sys_package>
        <sys_policy/>
        <sys_scope display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</sys_scope>
        <sys_update_name>sys_script_vtable_921e08c9978e71103c2d3f56f053afb2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-20 22:03:26</sys_updated_on>
        <table>x_376096_dla_st_pot_data_leak</table>
    </sys_script_vtable>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</application>
        <comments/>
        <file_path/>
        <instance_id>65348116dbf0fb04b847ac44d496196d</instance_id>
        <instance_name>dev81254</instance_name>
        <name>sys_script_vtable_921e08c9978e71103c2d3f56f053afb2</name>
        <order/>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script_vtable"&gt;&lt;sys_script_vtable action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;advanced&gt;false&lt;/advanced&gt;&lt;cache_isolation_level&gt;USER&lt;/cache_isolation_level&gt;&lt;cache_strategy&gt;CACHE_BY_QUERY&lt;/cache_strategy&gt;&lt;cache_ttl&gt;0&lt;/cache_ttl&gt;&lt;name&gt;DLA - Potential Data Leak Table&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/* global x_376096_dla, v_table, v_query, GlideRecord */
/* eslint no-undef: "error" */
(function executeQuery(v_table, v_query) {
    // Main API:
    //    v_table.addRow({ ... }) - adds a row to the result set
    
    // There are also query helper methods
    //    v_query.getEncodedQuery() - returns encoded querystring
    //    v_query.getCondition(field) - returns encoded querystring for the given field (includes field name, operator, and value)
    //    v_query.getParameter(field) - returns parameter for the given field (only includes value for equality conditions)
    //    v_query.isGet() - returns whether the query is a single get by sys_id
    //    v_query.getSysId() - returns parameter for sys_id field
    //    v_query.isTextSearch() - returns whether the query contains a text query parameter
    //    v_query.getTextSearch() - returns text search query parameter (internal field name 123TEXTQUERY321)
    //    v_query.getFirstRowWanted() - returns the first row to include
    //    v_query.getLastRowWanted() - returns the last row to include
  
    // Note: You must define sys_id for each row so that forms and lists for this table work properly
     
    // Your code goes here
    // v_table.addRow({...})

	const affectedTables = new x_376096_dla.DLAUtil().getAffectedTables();
	affectedTables.breached.forEach(breach =&gt; {
		let widgetSysID;
		const widgetGr = new GlideRecord('sp_widget');
		widgetGr.addQuery('id', breach.widget)
			.addOrCondition('sys_id', breach.widget);
		widgetGr.setLimit(1);
		widgetGr.query();
		if (widgetGr.next()) {
			widgetSysID = widgetGr.getUniqueValue();
		}

		v_table.addRow({
			widget: widgetSysID,
			table: breach.table,
			transaction: breach.transaction,
			notes: breach.reason,
			probability: breach.prob
		});
	});

  })(v_table, v_query);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_vtable&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-10-20 22:00:54&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;921e08c9978e71103c2d3f56f053afb2&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;DLA - Potential Data Leak Table&lt;/sys_name&gt;&lt;sys_package display_value="Data Leak Analyser" source="x_376096_dla"&gt;7ab9de70978671103c2d3f56f053af17&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Data Leak Analyser"&gt;7ab9de70978671103c2d3f56f053af17&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_vtable_921e08c9978e71103c2d3f56f053afb2&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-10-20 22:03:26&lt;/sys_updated_on&gt;&lt;table&gt;x_376096_dla_st_pot_data_leak&lt;/table&gt;&lt;/sys_script_vtable&gt;&lt;/record_update&gt;</payload>
        <payload_hash>1835917077</payload_hash>
        <record_name>DLA - Potential Data Leak Table</record_name>
        <reverted_from/>
        <source>3ab9de34978671103c2d3f56f053affb</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-20 22:03:27</sys_created_on>
        <sys_id>5f6f404d978e71103c2d3f56f053af84</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>18b4f1d5fb10000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-20 22:03:27</sys_updated_on>
        <type>Remote Table</type>
        <update_guid>176f404dca8e71106eb32bfda1a0d484</update_guid>
        <update_guid_history>176f404dca8e71106eb32bfda1a0d484:1835917077,9adec40db48e71104c08cdbf22bfed03:393992742</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-22 08:10:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_db_object display_value="" name="sys_script_vtable">sys_script_vtable</sys_db_object>
        <sys_id>1bc9da734583402483d8dd03aae11110</sys_id>
        <sys_metadata>921e08c9978e71103c2d3f56f053afb2</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>DLA - Potential Data Leak Table</sys_name>
        <sys_package display_value="Data Leak Analyser" source="x_376096_dla">7ab9de70978671103c2d3f56f053af17</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</sys_scope>
        <sys_scope_delete display_value="">018d62d8d4c944a6803460baf46bd164</sys_scope_delete>
        <sys_update_name>sys_script_vtable_921e08c9978e71103c2d3f56f053afb2</sys_update_name>
        <sys_update_version display_value="sys_script_vtable_921e08c9978e71103c2d3f56f053afb2">5f6f404d978e71103c2d3f56f053af84</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-22 08:10:31</sys_updated_on>
    </sys_metadata_delete>
</record_update>
