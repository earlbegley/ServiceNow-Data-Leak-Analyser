<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script/>
        <description/>
        <direct>false</direct>
        <endpoint>x_376096_dla_analyse_leaks.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
	<g:inline template="x_376096_dla_dashboard_actions.xml"/>
	<g2:evaluate var="jvar_refresh" expression="RP.getParameterValue('refresh')" />
	<j2:if test="$[!empty(jvar_refresh)]">
		<script>
			(function refreshReportTable() {
				if (window.parent) {
					window.parent.document
						.querySelectorAll(".header-icon.icon-refresh").forEach(function (element) {
						element.click();
					});
				}
			})();
		</script>
	</j2:if>
	<g:ui_form>
		<table>
			<tr>
				<td><input type="checkbox" disabled="disabled" checked="true" /></td>
				<td>No 'Render size' threshold</td>
			</tr>
			<tr>
				<td><input type="checkbox" disabled="disabled" checked="true" /></td>
				<td>Generate Historic ACLs from Update Versions</td>
			</tr>
			<tr>
				<td><input type="checkbox" disabled="disabled" /></td>
				<td>Reopen closed tasks</td>
			</tr>
			<tr>
				<td><input type="checkbox" disabled="disabled" checked="true" /></td>
				<td>Add changed analysis results to 'Work notes'</td>
			</tr>
		</table>
		<button class="action button" type="submit" onclick="this.disabled=true; this.form.submit();">
			${gs.getMessage('dla_run_analysis')}
		</button>
	</g:ui_form>
	<g2:evaluate>
		const skipAnalysis = RP.getParameterValue('skip_analysis') == 'true';
		const leakResultGr = new GlideRecord('x_376096_dla_leak_result');
		leakResultGr.setLimit(1);
		leakResultGr.query();
		
		let runLeakAnalysis = false;
		if (!leakResultGr.hasNext() $[AND] !skipAnalysis) {
			runLeakAnalysis = true;
		}
	</g2:evaluate>
	<j2:if test="$[runLeakAnalysis]">
		<script>
			(function () {
				document.querySelector('#form\\.3ec65351978ef1103c2d3f56f053af5e button').click();
			})();
		</script>
	</j2:if>
</j:jelly>]]></html>
        <name>analyse_leaks</name>
        <processing_script><![CDATA[/* global x_376096_dla, GlideRecord, GlideSysAttachment */
/* global request, response */
/* eslint no-undef: "error" */
(function (request, response) {
	// request [GlideServletRequest]
	// https://developer.servicenow.com/dev.do#!/reference/api/sandiego/server/no-namespace/c_GlideServletRequestScopedAPI
	
	// response [GlideServletResponse]
	// https://developer.servicenow.com/dev.do#!/reference/api/sandiego/server/no-namespace/c_GlideServletResponseScopedAPI
	
	// this
	// [represents the values from the <g:ui_form>]
	
	const dlaUtil = new x_376096_dla.DLAUtil();
	const gsa = new GlideSysAttachment();
	const analysis = dlaUtil.analyseTransactions();
	
	const transactions = [];
	analysis.prevented.forEach(prevented => {
		transactions.push(prevented.transaction);
		prevented.acls = prevented.acls.filter(a => a.roles.length == 0 || a.roles.indexOf('public') != -1);
		
		const leakResultGr = new GlideRecord('x_376096_dla_leak_result');
		leakResultGr.addQuery('transaction', prevented.transaction);
		leakResultGr.setLimit(1);
		leakResultGr.query();
		if (leakResultGr.next()) {
			const leakResultDescription = leakResultGr.description.toString();
			if (leakResultGr.short_description != 'Data Leak prevented' ||
				leakResultGr.widget != prevented.widget ||
				leakResultGr.table != prevented.table ||
				leakResultGr.field != prevented.field ||
				leakResultGr.leaked_fields != prevented.leaked_fields ||
				leakResultGr.leak_size != prevented.leak_size ||
				leakResultGr.attempt_date != prevented.attempt_date ||
				!leakResultDescription.includes(prevented.reason)) {
				leakResultGr.short_description = 'Data Leak prevented';
				leakResultGr.widget = prevented.widget;
				leakResultGr.leak_size = prevented.leak_size;
				leakResultGr.table = prevented.table;
				leakResultGr.field = prevented.field;
				leakResultGr.leaked_fields = prevented.leaked_fields;
				leakResultGr.attempt_date = prevented.attempt_date;
				
				if (!leakResultDescription.includes(prevented.reason)) {
					leakResultGr.work_notes += 'Updated Analysis:\nReason for Data-Leak-Prevention: ' + prevented.reason;
				}
				
				leakResultGr.update();
			}
			
			removeOutdatedHistoricACLs(leakResultGr, prevented.acls);
			const existingACLs = updateHistoricACLs(leakResultGr, prevented.acls);
			insertMissingHistoricACLs(leakResultGr, prevented.acls, existingACLs);
		} else {
			leakResultGr.newRecord();
			leakResultGr.transaction = prevented.transaction;
			leakResultGr.widget = prevented.widget;
			leakResultGr.table = prevented.table;
			leakResultGr.field = prevented.field;
			leakResultGr.leaked_fields = prevented.leaked_fields;
			leakResultGr.attempt_date = prevented.attempt_date;
			leakResultGr.leak_size = prevented.leak_size;
			leakResultGr.short_description = 'Data Leak prevented';
			leakResultGr.description = 'This transaction has been identified as a "Prevented Potential Data Leak".\nReason: ' + prevented.reason + '\n\nPlease aknowledge by closing this task with a proper closure note.';
			const leakResultSysID = leakResultGr.insert();
			
			const transXML = dlaUtil.exportRecordXML('syslog_transaction', prevented.transaction);
			gsa.write(leakResultGr, 'trans_' + prevented.transaction + '.xml', 'application/xml', transXML.toString());
			
			insertMissingHistoricACLs(leakResultGr, prevented.acls, []);
		}
	});
	
	analysis.breached.forEach(breached => {
		transactions.push(breached.transaction);
		breached.acls = breached.acls.filter(a => a.roles.length == 0 || a.roles.indexOf('public') != -1);
		
		const leakResultGr = new GlideRecord('x_376096_dla_leak_result');
		leakResultGr.addQuery('transaction', breached.transaction);
		leakResultGr.setLimit(1);
		leakResultGr.query();
		if (leakResultGr.next()) {
			const leakResultDescription = leakResultGr.description.toString();
			if (leakResultGr.short_description != 'Potential Data Leak' ||
				leakResultGr.widget != breached.widget ||
				leakResultGr.table != breached.table ||
				leakResultGr.field != breached.field ||
				leakResultGr.leaked_fields != breached.leaked_fields ||
				leakResultGr.leak_size != breached.leak_size ||
				leakResultGr.attempt_date != breached.attempt_date ||
				!leakResultDescription.includes(breached.reason)) {
				leakResultGr.short_description = 'Potential Data Leak';
				leakResultGr.widget = breached.widget;
				leakResultGr.table = breached.table;
				leakResultGr.field = breached.field;
				leakResultGr.leaked_fields = breached.leaked_fields;
				leakResultGr.leak_size = breached.leak_size;
				leakResultGr.attempt_date = breached.attempt_date;
				
				if (!leakResultDescription.includes(breached.reason)) {
					leakResultGr.work_notes += 'Updated Analysis:\nReason for Data-Leak: ' + breached.reason;
				}
				
				leakResultGr.update();
			}
			
			removeOutdatedHistoricACLs(leakResultGr, breached.acls);
			const existingACLs = updateHistoricACLs(leakResultGr, breached.acls);
			insertMissingHistoricACLs(leakResultGr, breached.acls, existingACLs);
		} else {
			leakResultGr.newRecord();
			leakResultGr.transaction = breached.transaction;
			leakResultGr.widget = breached.widget;
			leakResultGr.table = breached.table;
			leakResultGr.field = breached.field;
			leakResultGr.leaked_fields = breached.leaked_fields;
			leakResultGr.attempt_date = breached.attempt_date;
			leakResultGr.leak_size = breached.leak_size;
			leakResultGr.short_description = 'Potential Data Leak';
			leakResultGr.description = 'This transaction has been identified as a "Potential Data Leak".\nReason: ' + breached.reason + '\n\nPlease examine the ACLs of the Table to identify what table might have leaked.';
			leakResultGr.insert();
			
			const transXML = dlaUtil.exportRecordXML('syslog_transaction', breached.transaction);
			gsa.write(leakResultGr, 'trans_' + breached.transaction + '.xml', 'application/xml', transXML.toString());
			
			insertMissingHistoricACLs(leakResultGr, breached.acls, []);
		}
	});
	

	// 2023-11-10 MKR: Deactivated Automatic Close as transaction cleanup will cause this
	// -> is there any reason to actually close a task by the analysis?
// 	const leakResultGr = new GlideRecord('x_376096_dla_leak_result');
// 	leakResultGr.addQuery('active', true);
// 	leakResultGr.addQuery('transaction', 'NOT IN', transactions);
// 	leakResultGr.setValue('state', 3); // closed complete
// 	leakResultGr.setValue('work_notes', 'Task has been closed as the affected Leak is no longer included in the latest Leak analysis.');
// 	leakResultGr.updateMultiple();
	
	// prevent refresh loop when there analysis hasn't yielded any results
	response.sendRedirect('x_376096_dla_analyse_leaks.do?refresh=true&skip_analysis=' + String(transactions.length == 0));
	
	//
	// only helper functions below
	//
	
	function calculateHistoricACLRisk(acl) {
		if (acl.active) {
			if (acl.roles.length == 0 || acl.roles.indexOf('public') != -1) {
				// public ACLs always have high risk				
				return 'high';
			}
			
			return 'medium';
		} else {
			return 'low';
		}
	}
	
	function removeOutdatedHistoricACLs(leakResultGr, acls) {
		const historicAclGr = new GlideRecord('x_376096_dla_historic_acl');
		historicAclGr.addQuery('leak_result', leakResultGr.sys_id);
		historicAclGr.addQuery('original_acl', 'NOT IN', acls.map(a => a.sys_id));
		historicAclGr.query();
		// deleteMultiple sometimes runs asynchronous 
		while (historicAclGr.next()) {
			historicAclGr.deleteRecord();
		}
	}
		
	function updateHistoricACLs(leakResultGr, acls) {
		const historicAclGr = new GlideRecord('x_376096_dla_historic_acl');
		historicAclGr.addQuery('leak_result', leakResultGr.sys_id);
		historicAclGr.addQuery('original_acl', 'IN', acls.map(a => a.sys_id));
		historicAclGr.query();

		const existingACLs = [];
		while (historicAclGr.next()) {
			const acl = acls.find(a => a.sys_id == historicAclGr.original_acl);
			existingACLs.push(acl.sys_id);
			historicAclGr.scope = acl.sys_scope;
			historicAclGr.active = acl.active;
			historicAclGr.condition = acl.condition;
			historicAclGr.advanced = acl.advanced;
			historicAclGr.script = acl.script;
			historicAclGr.roles = acl.roles.join(',');
			historicAclGr.risk = calculateHistoricACLRisk(acl);
			historicAclGr.action = 'c402d10f9706f9103c2d3f56f053af4f,70d62ecb978af9103c2d3f56f053af5a,2521b2cb97caf9103c2d3f56f053af08';
			historicAclGr.update();
		}
		
		return existingACLs;
	}
			
	function insertMissingHistoricACLs(leakResultGr, acls, existingACLs) {
		acls.filter(a => !existingACLs.includes(a.sys_id)).forEach(acl => {
			const historicAclGr = new GlideRecord('x_376096_dla_historic_acl');
			historicAclGr.newRecord();
			historicAclGr.leak_result = leakResultGr.sys_id;
			historicAclGr.original_acl = acl.sys_id;
			historicAclGr.scope = acl.sys_scope;
			historicAclGr.active = acl.active;
			historicAclGr.condition = acl.condition;
			historicAclGr.advanced = acl.advanced;
			historicAclGr.script = acl.script;
			historicAclGr.roles = acl.roles.join(',');
			historicAclGr.risk = calculateHistoricACLRisk(acl);
			historicAclGr.action = 'c402d10f9706f9103c2d3f56f053af4f,70d62ecb978af9103c2d3f56f053af5a,2521b2cb97caf9103c2d3f56f053af08';
			historicAclGr.insert();
		});
	}
}).call(this, request, response);]]></processing_script>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-22 07:12:58</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3ec65351978ef1103c2d3f56f053af5e</sys_id>
        <sys_mod_count>48</sys_mod_count>
        <sys_name>analyse_leaks</sys_name>
        <sys_package display_value="Data Leak Analyser" source="x_376096_dla">7ab9de70978671103c2d3f56f053af17</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</sys_scope>
        <sys_update_name>sys_ui_page_3ec65351978ef1103c2d3f56f053af5e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-20 16:05:15</sys_updated_on>
    </sys_ui_page>
</record_update>
