<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_dla.DLAUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This Script Include contains the main algorithms that generate the Data Leak Analysis.&#13;
In order to be able to access global-scoped tables, the scoped-script-execution technique is used in favor of a Extension Point. &#13;
Because Extension Points would require to setup all accessed scoped before the app can function properly. Due to severity of this incident and also to ease the usage of the application, I decided to go with scoped-script-execution technique.</description>
        <mobile_callable>false</mobile_callable>
        <name>DLAUtil</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global Class, GlideRecord, GlideScopedEvaluator, XMLDocument2 */
/* global global, gs */
/* eslint no-undef: "error" */
var DLAUtil = Class.create();
DLAUtil.prototype = {
    initialize: function() {
		
    },
	
	getHistoricWidget: function (widgetSysId, date) {
		const appFileWidget = this._execScript('global',
			'(function () {' +
				'var widget = {};' +
				'var widgetGr = new GlideRecord("sp_widget");' +
				'widgetGr.addQuery("sys_id", widgetSysId);' +
				'widgetGr.addQuery("sys_updated_on", "<=", date);' +
				'widgetGr.query();' +
				'if (widgetGr.next()) {' +
					'return {' +
						'id: widgetGr.id.toString(),' +
						'name: widgetGr.name.toString(),' +
						'"public": !!widgetGr["public"],' +
						'roles: widgetGr.roles.toString(),' +
						'script: widgetGr.script.toString()' +
					'};' +
				'}' +
			'})();', { widgetSysId: widgetSysId, date: date });

		const updateWidget = this._execScript('global',
			'(function () {' +
				'var gdt = new GlideDateTime(date);' +
				'var ms = gdt.getNumericValue();' +
				'var dateCounter = Number(ms).toString(16) + "0000001";' +
				'var versionGr = new GlideRecord("sys_update_version");' +
				'versionGr.addQuery("state", "IN", ["current", "previous"]);' +
				'versionGr.addQuery("name", "sp_widget_" + widgetSysId);' +
				'versionGr.addQuery("sys_recorded_at", "<=", dateCounter);' +
				'versionGr.orderByDesc("sys_recorded_at");' +
				'versionGr.setLimit(1);' +
				'versionGr.query();' +
				'if (versionGr.next()) {' +
					'var xml = new XMLDocument2();' +
					'xml.parseXML(versionGr.payload);' +
					'if (versionGr.action == "INSERT_OR_UPDATE") {' +
						'return {' +
							'id: xml.getNodeText("//record_update/sp_widget/id"),' +
							'name: xml.getNodeText("//record_update/sp_widget/name"),' +
							'"public": xml.getNodeText("//record_update/sp_widget/public") == "true",' +
							'roles: xml.getNodeText("//record_update/sp_widget/roles"),' +
							'script: xml.getNodeText("//record_update/sp_widget/script")' +
						'};' +
					'}' +
				'}' +
			'})();', { widgetSysId: widgetSysId, date: date });
		
		const widget = updateWidget || appFileWidget;
		if (widget) {
			widget.id = String(widget.id);
			widget.name = String(widget.name);
			widget.global = Boolean(widget.global);
			widget.roles = String(widget.roles);
			widget.script = String(widget.script);
		}
		
		return widget;
	},
	
	getHistoricACLs: function (tableName, date) {
		let acls = this._execScript('global',
			'(function () {' +
				'var acls = {};' +
				'var aclGr = new GlideRecord("sys_security_acl");' +
				'aclGr.addQuery("type", "record");' +
				'aclGr.addQuery("operation", "read");' +
				'aclGr.addQuery("name", tableName);' +
				'aclGr.addQuery("sys_updated_on", "<=", date);' +
				'aclGr.query();' +
				'while (aclGr.next()) {' +
					'var aclSysID = aclGr.getUniqueValue();' +
					'acls[aclSysID] = {' +
						'sys_id: aclSysID,' +
						'sys_scope: aclGr.getValue("sys_scope"),' +
						'active: !!aclGr.active,' +
						'condition: aclGr.condition.toString(),' +
						'advanced: !!aclGr.advanced,' +
						'script: aclGr.script.toString(),' +
						'roles: []' +
					'};' +
				'}' +
				'return acls;' +
			'})();', { tableName: tableName, date: date });

		// add roles to known ACLs
		acls = this._execScript('global',
			'(function () {' +
				'var aclRoleGr = new GlideRecord("sys_security_acl_role");' +
				'aclRoleGr.addQuery("sys_security_acl", "IN", Object.keys(acls));' +
				'aclRoleGr.addQuery("sys_updated_on", "<=", date);' +
				'aclRoleGr.addNotNullQuery("sys_user_role");' +
				'aclRoleGr.query();' +
				'while (aclRoleGr.next()) {' +
					'var roleName = aclRoleGr.sys_user_role.name.toString();' +
					'if (roleName) {' +
						'var aclSysID = aclRoleGr.getValue("sys_security_acl");' +
						'var acl = acls[aclSysID];' +
						'if (acl.roles.indexOf(roleName) == -1) {' +
							'acl.roles.push(roleName);' +
						'}' +
					'}' +
				'}' +
				'return acls;' +
			'})();', { acls: acls, date: date });

		// (virtually) restore deleted ACLs
		acls = this._execScript('global',
			'(function () {' +
				'var gdt = new GlideDateTime(date);' +
				'var ms = gdt.getNumericValue();' +
				'var dateCounter = Number(ms).toString(16) + "0000001";' +
				'var versionGr = new GlideRecord("sys_update_version");' +
				'versionGr.addQuery("state", "IN", ["current", "previous"]);' +
				'versionGr.addQuery("name", "STARTSWITH", "sys_security_acl");' +
				'versionGr.addQuery("sys_recorded_at", "<=", dateCounter);' +
				'versionGr.addQuery("record_name", tableName);' +
				'Object.keys(acls).forEach(function (aclSysID) {' +
					'versionGr.addQuery("name", "!=", "sys_security_acl_" + aclSysID);' +
				'});' +
				'versionGr.orderByDesc("sys_recorded_at");' +
				'versionGr.query();' +
				'while (versionGr.next()) {' +
					'var xml = new XMLDocument2();' +
					'xml.parseXML(versionGr.payload);' +
					'var aclSysID = xml.getNodeText("//record_update/sys_security_acl/sys_id");' +
					'if (aclSysID in acls) {' +
						'continue;' +
					'} else if (versionGr.action == "INSERT_OR_UPDATE") {' +
						'var operation = xml.getNodeText("//record_update/sys_security_acl/operation");' +
						'var type = xml.getNodeText("//record_update/sys_security_acl/type");' +
						'if (operation != "read" || type != "record") {' +
							'continue;' +
						'}' +
						'acls[aclSysID] = {' +
							'sys_id: aclSysID,' +
							'sys_scope: xml.getNodeText("//record_update/sys_security_acl/sys_scope"),' +
							'active: xml.getNodeText("//record_update/sys_security_acl/active") == "true",' +
							'condition: xml.getNodeText("//record_update/sys_security_acl/condition"),' +
							'advanced: xml.getNodeText("//record_update/sys_security_acl/advanced") == "true",' +
							'script: xml.getNodeText("//record_update/sys_security_acl/script"),' +
							'roles: []' +
						'};' +
					'}' +
				'}' +
				'return acls;' +
			'})();', { acls: acls, tableName: tableName, date: date });
		
		// restore deleted ACL Roles
		for (let acl in acls) {
			acls = this._execScript('global',
				'(function () {' +
					'var gdt = new GlideDateTime(date);' +
					'var ms = gdt.getNumericValue();' +
					'var dateCounter = Number(ms).toString(16) + "0000001";' +
					'var versionGr = new GlideRecord("sys_update_version");' +
					'versionGr.addQuery("state", "IN", ["current", "previous"]);' +
					'versionGr.addQuery("name", "STARTSWITH", "sys_security_acl_role");' +
					'versionGr.addQuery("sys_recorded_at", "<=", dateCounter);' +
					'versionGr.orderByDesc("sys_recorded_at");' +
					'versionGr.query();' +
					'while (versionGr.next()) {' +
						'var xml = new XMLDocument2();' +
						'xml.parseXML(versionGr.payload);' +
						'if (versionGr.action == "INSERT_OR_UPDATE") {' +
							'var aclSysID = xml.getNodeText("//record_update/sys_security_acl_role/sys_security_acl");' +
							'if (aclSysID in acls) {' +
								'var node = xml.getNode("//record_update/sys_security_acl_role/sys_user_role");' +
								'if (node) {' +
									'var roleName = node.getAttribute("display_value");' +
									'if (roleName) {' +
										'var acl = acls[aclSysID];' +
										'if (acl.roles.indexOf(roleName) == -1) {' +
											'acl.roles.push(roleName);' +
										'}' +
									'}' +
								'}' +
							'}' +
						'}' +
					'}' +
					'return acls;' +
				'})();', { acls: acls, date: date });
		}
		
		// Convert the Global-Scoped-Array 'acls' to a Scoped-Array containing only Scoped-Data-Type-Members
		return Object.keys(acls).map(aclSysID => {
			const globalACL = acls[aclSysID];
			const roles = [];
			for (let i = 0; i < globalACL.roles.length; i++) {
				roles.push(String(globalACL.roles[i]));
			}
			
			return {
				sys_id: String(aclSysID),
				sys_scope: String(globalACL.sys_scope),
				active: Boolean(globalACL.active),
				condition: String(globalACL.condition),
				advanced: Boolean(globalACL.advanced),
				script: String(globalACL.script),
				roles: roles
			};
		});
	},
	
	exportRecordXML: function (recordTable, recordSysID) {
		const recordJSON = this._execScript('global',
			'(function () {'
				+ 'var recordJSON = null;'
				+ 'var anyGr = new GlideRecord(recordTable);'
				+ 'anyGr.addQuery("sys_id", recordSysID);'
				+ 'anyGr.setLimit(1);'
				+ 'anyGr.query();'
				+ 'if (anyGr.next()) {'
					+ 'recordJSON = {};'
					+ 'var fields = anyGr.getFields();'
					+ 'for (var i = 0; i < fields.size(); i++) {'
						+ 'var ge = fields.get(i);'
						+ 'recordJSON[ge.getName()] = ge.toString();'
					+ '}'
				+ '}'
				+ 'return recordJSON;'
			+ '})();', {
			recordTable: recordTable,
			recordSysID: recordSysID
		});
		
		if (recordJSON) {
			const xml = new XMLDocument2();
			xml.createElement('xml');
			xml.createElement(recordTable);
			xml.createElementWithTextValue('sys_id', recordSysID);
			for (let element in recordJSON) {
				xml.createElementWithTextValue(element, recordJSON[element]);
			}

			return xml;
		}
		
		return null;
	},
	
	_execScript: function (scope, script, vars, resultVariable) {
		const scriptGr = new GlideRecord('sys_rte_eb_script_operation');
		scriptGr.addQuery('sys_id', '9c8bdb7c978a71103c2d3f56f053afef');
		scriptGr.setLimit(1);
		scriptGr.query();
		if (scriptGr.next()) {
			scriptGr.sys_scope = scope;
			scriptGr.script = script;
			
			const gse = new GlideScopedEvaluator();
			if (vars) {
				for (let name in vars) {
					gse.putVariable(name, vars[name]);
				}
			}
			
			const result = gse.evaluateScript(scriptGr, 'script');
			if (resultVariable) {
				return gse.getVariable(resultVariable);
			}
			
			return result;
		} else {
			gs.error('[DLA] No Script Injection possible!');
		}
		
		return null;
	},
	
	analyseWidgets: function () {
		const catItemWidgetSysID = '3c29786e87133200e0ef0cf888cb0bdf';
		const affectedWidgets = [];
		const widgetGr = new GlideRecord('sp_widget');
		widgetGr.addQuery('public', true);
		widgetGr.addQuery('script', 'CONTAINS', 'GlideRecord')
			.addOrCondition('script', 'CONTAINS', 'GlideRecordSecure');
		widgetGr.addQuery('sys_id', '!=', catItemWidgetSysID); // false positive
		widgetGr.orderByDesc('sys_created_on');
		widgetGr.query();
		
		// regex to lookup for a dynamic GlideRecordQuery
		const dynGrRegex = /(?:var|let|const)\s*(\S+)\s*=\s*new\s*GlideRecord(Secure)?\(\s*[^'"].*\)/g;
		const PRIORITY = {
			planning: 5,
			low: 4,
			moderate: 3,
			high: 2,
			critical: 1
		};
		
		while (widgetGr.next()) {
			let reason = '';
			let priority = PRIORITY.planning;
			
			const script = widgetGr.script.toString();
			let result;
			while (result = dynGrRegex.exec(script)) {
				// Note: This regex doesn't take into account that the variable might be
				// reassigned, or a variable with the same name is used on other parts
				// of the script. This might lead to false positives!
				reason = 'Dynamic GlideRecord Query'
				priority = PRIORITY.moderate;
				
				// test for loops - loops will probably leak a lot more data!
				const loopRegex = new RegExp('while\\s*\\(\\s*' + result[1] + '\\s*.next\\(\\s*\\)\\s*\\)');
				if (script.match(loopRegex)) {
					reason = 'Dynamic GlideRecord Query with Loop';
					priority = PRIORITY.high;
					break;
				}
			}
			
			if (reason) {
				affectedWidgets.push({
					sys_id: widgetGr.getUniqueValue(),
					name: widgetGr.name.toString(),
					reason: reason,
					priority: priority
				});
			}
		}
		
		return affectedWidgets;
	},
	
	aclHasRoles: function (aclSysID) {
		const aclRoleGr = new GlideRecord('sys_security_acl_role');
		aclRoleGr.addQuery('sys_security_acl', aclSysID);
		aclRoleGr.setLimit(1);
		aclRoleGr.query();
		return aclRoleGr.hasNext();
	},
	
	aclHasRole: function (aclSysID, roleName) {
		const aclRoleGr = new GlideRecord('sys_security_acl_role');
		aclRoleGr.addQuery('sys_security_acl', aclSysID);
		aclRoleGr.addQuery('sys_user_role.name', roleName);
		aclRoleGr.setLimit(1);
		aclRoleGr.query();
		return aclRoleGr.hasNext();
	},
	
	analyseACLs: function () {
		const publicAccessACLs = [];
		const aclGr = new GlideRecord('sys_security_acl');
		aclGr.addQuery('type', 'record');
		// we only want table-level ACLs
		aclGr.addQuery('name', 'DOES NOT CONTAIN', '.');
		aclGr.addQuery('name', 'DOES NOT CONTAIN', '*');
		aclGr.addQuery('operation', 'read');
		aclGr.addNullQuery('script'); // a non-existing script is usually an indicator that a ACL is not protected
		aclGr.orderByDesc('sys_created_on');
		aclGr.query();
		while (aclGr.next()) {
			if (!this.aclHasRoles(aclGr.sys_id)) {
				publicAccessACLs.push({
					sys_id: aclGr.getUniqueValue(),
					table: aclGr.getValue('name'),
					reason: 'potential public access allowed (no roles)'
				});
			} else if (this.aclHasRole(aclGr.sys_id, 'public')) {
				publicAccessACLs.push({
					sys_id: aclGr.getUniqueValue(),
					table: aclGr.getValue('name'),
					reason: 'potential public access allowed (roles include "public")'
				});
			}
		}
		
		return publicAccessACLs;
	},
	
	analyseTransactions: function () {
		const analysisResult = {
			prevented: [], // prevented by widget-simple-list "hasPublicAccess"
			breached: []
		};
		
		// widget-sys-id to widget-id map
		const widgetCache = {};
		const getWidgetSysId = function (widgetIdOrSysId) {
			if (widgetIdOrSysId in widgetCache) {
				return widgetCache[widgetIdOrSysId];
			}
			
			const widgetGr = new GlideRecord('sp_widget');
			widgetGr.addQuery('id', widgetIdOrSysId)
				.addOrCondition('sys_id', widgetIdOrSysId);
			widgetGr.setLimit(1);
			widgetGr.query();
			if (widgetGr.next()) {
				return widgetCache[widgetIdOrSysId] = widgetGr.getUniqueValue();
			}
			
			return '';
		};
		
		// need to query syslog_transaction via global-script (by default this table is global access only)
		const globalTransData = this._execScript('global',
			'(function () {' +
				'var transURLs = [];' +
				'var transGr = new GlideRecord("syslog_transaction");' +
				'transGr.addQuery("sys_created_by", "guest");' +
				'transGr.addQuery("url", "STARTSWITH", "/api/now/sp/widget");' +
				'transGr.orderByDesc("start_process_at");' +
				'transGr.query();' +
				'while (transGr.next()) {' +
					'var url = transGr.url.toString();' +
					// widget-modal is embedding other widgets, but this will not bypass the public check
					'if (url.indexOf("/api/now/sp/widget/widget-modal") == 0) {' +
						'continue;' +
					'}' +
					'transURLs.push({' +
						'sys_id: transGr.getUniqueValue(),' +
						'url: url,' +
						'size: +transGr.render_size,' +
						'date: transGr.start_process_at.toString()' +
					'});' +
				'}' +
				'return transURLs;' +
			'})();'
		);
		
		// the array returned by the Script above is a global-scope array containing global-scope objects
		// we convert this to scoped objects to allow e.g. string methods like 'includes'
		const transData = [];
		for (let i = 0; i < globalTransData.length; i++) {
			const trans = globalTransData[i];
			transData.push({
				sys_id: String(trans.sys_id),
				url: String(trans.url),
				size: Number(trans.size),
				date: String(trans.date)
			});
		}
		
		//const regex = /^[/]?api\/now\/sp\/widget\/(.*?)\?(?=.*t=([^&]+)|)(?=.*f=([^&]+)|)/;
		const widgetRegex = /^\/api\/now\/sp\/widget\/(.*?)[?&$]/;
		const tableRegex = /^\/api\/now\/sp\/widget\/.*?\?(?:.*t=([^&]+)|)/;
		const fieldRegex = /^\/api\/now\/sp\/widget\/.*?\?(?:.*f=([^&]+)|)/;
		const widgetSimpleListSysID = '5b255672cb03020000f8d856634c9c28';
		for (let i = 0; i < transData.length; i++) {
			const widgetMatch = transData[i].url.match(widgetRegex);
			const tableMatch = transData[i].url.match(tableRegex);
			if (widgetMatch && tableMatch) {
				const widget = widgetMatch[1];
				const table = tableMatch[1];
				const widgetSysId = getWidgetSysId(widget);
				const fieldMatch = transData[i].url.match(fieldRegex);
				let field = '';
				if (fieldMatch) {
					field = fieldMatch[1];
				}
				
				if (!widget || !table) {
					continue;
				}
				
				if (!gs.tableExists(table)) {
					analysisResult.prevented.push({
						widget: widgetSysId,
						table: table,
						field: field,
						leaked_fields: '',
						transaction: transData[i].sys_id,
						reason: 'invalid table accessed',
						attempt_date: transData[i].date,
						leak_size: transData[i].size,
						acls: []
					});
					continue;
				}
				
				const historicWidget = this.getHistoricWidget(widgetSysId, transData[i].date);
				if (historicWidget && !historicWidget.public) {
					analysisResult.prevented.push({
						widget: widgetSysId,
						table: table,
						field: field,
						leaked_fields: '',
						transaction: transData[i].sys_id,
						reason: 'widget not public',
						attempt_date: transData[i].date,
						leak_size: transData[i].size,
						acls: []
					});
					continue;
				}
				
				const acls = this.getHistoricACLs(table, transData[i].date);
				if (acls.length && !acls.find(acl => acl.roles.length == 0 || acl.roles.includes('public'))) {
					let reason = 'Protected by ACL (no public ACL)';
					if (widget == 'widget-simple-list' || widget == widgetSimpleListSysID) {
						// special case 'widget-simple-list': since March 2023, there is a 'public-access' which prevents leaks!
						// this is done by SNCACLUtil::hasPublicAccess which checks if a explicit public ACL-role is set
						reason = 'protected by SNCACLUtil::hasPublicAccess';
					}
					
					// if the table is not 'public', the simple list widget hasn't returned any results
					// and as such the current table isn't subjected to a data leak (at least not through this widget)
					analysisResult.prevented.push({
						widget: widgetSysId,
						table: table,
						field: field,
						leaked_fields: '',
						transaction: transData[i].sys_id,
						reason: reason,
						attempt_date: transData[i].date,
						leak_size: transData[i].size,
						acls: acls
					});
					continue;
				}

				const tableGr = new GlideRecord('sys_db_object');
				tableGr.addQuery('name', table);
				tableGr.setLimit(1);
				tableGr.query();
				
				let leakedFields = '';
				if (tableGr.next()) {
					const scope = tableGr.sys_scope.toString();
					leakedFields = this._execScript('global',
						'(function () {' +
							'var anyGr = new GlideRecord(table);' +
							'if (field && anyGr.isValidField(field)) {' +
								'return field;' +
							'} else {' +
								'return anyGr.getDisplayName();' +
							'}' +
						'})()', {
						table: table,
						field: field
					});
				} else {
					leakedFields = 'Unable to determine - Please check Table, Widget and Transaction';
				}
				
				analysisResult.breached.push({
					widget: widgetSysId,
					table: table,
					field: field,
					leaked_fields: leakedFields,
					transaction: transData[i].sys_id,
					reason: 'public access possible',
					leak_size: transData[i].size,
					attempt_date: transData[i].date,
					acls: acls
				});
			}
		}
		
		return analysisResult;
	},

    type: 'DLAUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-20 16:17:18</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7ac95274978671103c2d3f56f053af95</sys_id>
        <sys_mod_count>137</sys_mod_count>
        <sys_name>DLAUtil</sys_name>
        <sys_package display_value="Data Leak Analyser" source="x_376096_dla">7ab9de70978671103c2d3f56f053af17</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</sys_scope>
        <sys_update_name>sys_script_include_7ac95274978671103c2d3f56f053af95</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-20 16:09:12</sys_updated_on>
    </sys_script_include>
</record_update>
