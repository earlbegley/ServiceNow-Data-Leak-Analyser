<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_dla.DLAUtilClient</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>This Script Include encapsulates all GlideAjax / Client Side calls to the Data Leak Analyser API / Script Include.&#13;
Security Measures:&#13;
- Admin only access ensured via ACL (type = client_callable_script_include, role = admin)&#13;
- Underlying records are wrapped with GlideRecordSecure so that no ACL can be bypassed</description>
        <mobile_callable>false</mobile_callable>
        <name>DLAUtilClient</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[/* global global, gs, sn_ws, x_376096_dla */
/* global Class, GlideRecordSecure, GlideSysAttachment */
/* eslint no-undef: "error" */
var DLAUtilClient = Class.create();
DLAUtilClient.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	initialize: function () {
		global.AbstractAjaxProcessor.prototype.initialize.apply(this, arguments);
		this.dlaUtil = new x_376096_dla.DLAUtil();
    },
	
	analyseHistoricACL: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const aclSysID = this.getParameter('historic_acl');
		if (aclSysID) {
			const historicAclGr = new GlideRecordSecure('x_376096_dla_historic_acl');
			historicAclGr.addQuery('sys_id', aclSysID);
			historicAclGr.setLimit(1);
			historicAclGr.query();
			if (historicAclGr.next()) {
				// unsure why cleaning up the attachments does not work inside
				// the Analysers Background Transaction...
				const gsa = new GlideSysAttachment();
				let attGr = gsa.getAttachments('x_376096_dla_historic_acl', aclSysID);
				while (attGr.next()) {
					const fileName = attGr.file_name.toString();
					if (fileName.startsWith('leaked_')) {
						gsa.deleteAttachment(attGr.getUniqueValue());
					}
				}
				
				const leakDataFileName = 'leaked_data_' + aclSysID + '.txt';
				attGr = gsa.getAttachments('x_376096_dla_leak_result', historicAclGr.leak_result);
				while (attGr.next()) {
					if (attGr.file_name == leakDataFileName) {
						gsa.deleteAttachment(attGr.getUniqueValue());
					}
				}
				
				if (historicAclGr.tracker_id) {
					// analysis is already running
					result.status = 'success';
					result.tracker_id = historicAclGr.tracker_id.toString();
				} else {
					historicAclGr.access_token = gs.generateGUID();
					historicAclGr.update();

					const rm = new sn_ws.RESTMessageV2();
					rm.setHttpMethod('get');
					rm.setEndpoint(gs.getProperty('glide.servlet.uri') + 
						'api/x_376096_dla/public?access_token=' + historicAclGr.access_token + 
						'&historic_acl=' + historicAclGr.sys_id
					);
					const response = rm.execute();
					const statusCode = response.getStatusCode();
					if (statusCode == 200) {
						const restResult = JSON.parse(response.getBody());
						if (restResult.result) {
							if (restResult.result.status == 'success') {
								result.tracker_id = restResult.result.tracker_id;
								result.status = 'success';
							} else {
								result.message = restResult.result.message;
							}
						} else if (result.error) {
							result.message = result.error;
						}
					} else {
						result.message = gs.getMessage('dla_rest_call_failed', [statusCode]);
					}
				}
			} else {
				result.message = gs.getMessage('dla_record_unauthorized_or_invalid_record');
			}
		} else {
			result.message = gs.getMessage('dla_invalid_parameter');
		}
		
		return JSON.stringify(result);
	},
	
	cancelHistoricACLAnalysis: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const historicACLSysID = this.getParameter('historic_acl');
		if (historicACLSysID) {
			const historicACLGr = new GlideRecordSecure('x_376096_dla_historic_acl');
			historicACLGr.addQuery('sys_id', historicACLSysID);
			historicACLGr.addNotNullQuery('tracker_id');
			historicACLGr.setLimit(1);
			historicACLGr.query();
			if (historicACLGr.next()) {
				const state = {
					PENDING: 0,
					RUNNING: 1,
					SUCCESSFULL: 2,
					FAILED: 3,
					CANCELLED: 4
				};
				const trackerID = historicACLGr.tracker_id.toString();

				const progressGr = new GlideRecordSecure('sys_execution_tracker');
				progressGr.addQuery('sys_id', trackerID);
				progressGr.addQuery('state', 'IN', [state.PENDING, state.RUNNING]);
				progressGr.setLimit(1);
				progressGr.query();
				if (!progressGr.hasNext()) {
					// analysis finished, but the tracker_id wasn't cleared
					historicACLGr.tracker_id = '';
					historicACLGr.update();
				} else {
					// the analysis is still running => cancel it
					this.dlaUtil._execScript('global', 'SNC.GlideExecutionTracker.getBySysID(trackerID).cancel(message)', {
						trackerID: trackerID,
						message: 'Cancellation requested'
					});
				}

				// note: the running process will reset the tracker_id on the Historic ACL Record
				result.tracker_id = trackerID;
				result.status = 'success';
			} else {
				result.message = gs.getMessage('dla_record_unauthorized_or_invalid_record');
			}
		} else {
			result.message = gs.getMessage('dla_invalid_parameter');
		}
		
		return JSON.stringify(result);
	},
	
	filterPublicACLs: function () {
		const result = {
			status: 'error',
			message: ''
		};
		
		const dataLeakSysID = this.getParameter('data_leak');
		if (dataLeakSysID) {
			const dataLeakGr = new GlideRecordSecure('x_376096_dla_leak_result');
			dataLeakGr.addQuery('sys_id', dataLeakSysID);
			dataLeakGr.setLimit(1);
			dataLeakGr.query();
			if (dataLeakGr.next()) {
				const baseFilter = 'name=' + dataLeakGr.table + '^operation=read';
				const filter = this.getParameter('filter');
				const aclGr = new GlideRecordSecure('sys_security_acl');
				if (filter) {
					aclGr.addEncodedQuery(
						filter
							.split('^NQ')
							.map(x => baseFilter + '^' + x)
							.join('^NQ')
					);
				} else {
					aclGr.addEncodedQuery(baseFilter);
				}

				aclGr.query();

				const publicACLs = [];
				while (aclGr.next()) {
					const aclSysID = aclGr.getUniqueValue();
					if (this.dlaUtil.aclHasRole(aclSysID, 'public') ||
						!this.dlaUtil.aclHasRoles(aclSysID)) {
						publicACLs.push(aclSysID);
					}
				}

				result.all_public = publicACLs.length && publicACLs.length == aclGr.getRowCount();
				result.public_acls = publicACLs;
				result.status = 'success';
			} else {
				result.message = gs.getMessage('dla_record_unauthorized_or_invalid_record');
			}
		} else {
			result.message = gs.getMessage('dla_invalid_parameter');
		}		
		
		return JSON.stringify(result);
	},

    type: 'DLAUtilClient'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-28 09:27:17</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a8fee697974e3d103c2d3f56f053af31</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_name>DLAUtilClient</sys_name>
        <sys_package display_value="Data Leak Analyser" source="x_376096_dla">7ab9de70978671103c2d3f56f053af17</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</sys_scope>
        <sys_update_name>sys_script_include_a8fee697974e3d103c2d3f56f053af31</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-10 07:59:44</sys_updated_on>
    </sys_script_include>
</record_update>
