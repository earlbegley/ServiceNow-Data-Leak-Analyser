<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>GET</http_method>
        <name>Extract</name>
        <operation_script><![CDATA[/* global request, response */
/* global gs, x_376096_dla, GlideScriptedHierarchicalWorker, GlideRecord */
/* eslint no-undef: "error" */
(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

	const accessToken = String(request.queryParams.access_token || '').trim();
	const historicACL = String(request.queryParams.historic_acl || '').trim();
	const result = {
		status: 'error',
		message: ''
	};
	
	if (gs.getUserName() == 'guest') {
		if (accessToken && historicACL) {
			const historicAclGr = new GlideRecord('x_376096_dla_historic_acl');
			historicAclGr.addQuery('sys_id', historicACL);
			historicAclGr.addQuery('access_token', accessToken);
			historicAclGr.setLimit(1);
			historicAclGr.query();
			if (historicAclGr.next()) {
				// the access token is "one-use" only and should be cleared as early as possible
				historicAclGr.access_token = '';
				historicAclGr.update();
				
				const context = {
					tracker_id: null,
					historic_acl: historicAclGr.getUniqueValue()
				};
				
				const worker = new GlideScriptedHierarchicalWorker();
				worker.setProgressName('Historic ACL Analysis');
				worker.setScriptIncludeName('x_376096_dla.DLAHistoricACLAnalyser');
				worker.setScriptIncludeMethod('analyseHistoricACL');
				worker.putMethodArg('context', context);
				worker.setBackground(true);
				worker.start();

				result.tracker_id = context.tracker_id = worker.getProgressID();
				result.status = 'success';
			} else {
				result.message = gs.getMessage('dla_record_unauthorized_or_invalid_record');
			}
		} else {
			result.message = gs.getMessage('dla_access_token_required');
		}
	} else {
		result.message = gs.getMessage('dla_guest_only_access');
	}
	
	response.setBody(result);
	response.setStatus(200);

})(request, response);]]></operation_script>
        <operation_uri>/api/x_376096_dla/public</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>false</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-25 05:12:35</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>39879e1a97c239103c2d3f56f053af87</sys_id>
        <sys_mod_count>44</sys_mod_count>
        <sys_name>Extract</sys_name>
        <sys_package display_value="Data Leak Analyser" source="x_376096_dla">7ab9de70978671103c2d3f56f053af17</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</sys_scope>
        <sys_update_name>sys_ws_operation_39879e1a97c239103c2d3f56f053af87</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-30 10:10:15</sys_updated_on>
        <web_service_definition display_value="Extract Public">1c771e1a97c239103c2d3f56f053af5e</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
